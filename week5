import pandas as pd
from sklearn.datasets import fetch_20newsgroups
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, precision_score, recall_score
import matplotlib.pyplot as plt

# Load the 20 Newsgroups dataset
newsgroups_train = fetch_20newsgroups(subset='train')
newsgroups_test = fetch_20newsgroups(subset='test')

# Vectorize the text data
vectorizer = CountVectorizer(stop_words='english')
X_train = vectorizer.fit_transform(newsgroups_train.data)
X_test = vectorizer.transform(newsgroups_test.data)

# Initialize and train the Multinomial Naive Bayes classifier
nb = MultinomialNB()
nb.fit(X_train, newsgroups_train.target)

# Make predictions on the test data
y_pred = nb.predict(X_test)

# Calculate evaluation metrics
accuracy = accuracy_score(newsgroups_test.target, y_pred)
precision = precision_score(newsgroups_test.target, y_pred, average='macro')
recall = recall_score(newsgroups_test.target, y_pred, average='macro')

# Print evaluation metrics
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")

# Plot evaluation metrics
labels = ['Accuracy', 'Precision', 'Recall']
scores = [accuracy, precision, recall]

plt.bar(labels, scores)
plt.ylim([0, 1])  # Set the y-axis limit from 0 to 1
plt.title('Evaluation Metrics')
plt.xlabel('Metrics')
plt.ylabel('Scores')
plt.show()
